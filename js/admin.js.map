{"version":3,"names":[],"mappings":"","sources":["admin.js"],"sourcesContent":["/**\r\n * Admin scripts\r\n */\r\n\r\n( function( $ ) {\r\n    \"use strict\";\r\n\r\n    $( function() {\r\n\r\n        /**\r\n         * Alpha Color Picker JS\r\n         *\r\n         * This file includes several helper functions and the core control JS.\r\n         */\r\n        \r\n        /**\r\n         * Override the stock color.js toString() method to add support for\r\n         * outputting RGBa or Hex.\r\n         */\r\n        Color.prototype.toString = function( flag ) {\r\n        \r\n        \t// If our no-alpha flag has been passed in, output RGBa value with 100% opacity.\r\n        \t// This is used to set the background color on the opacity slider during color changes.\r\n        \tif ( 'no-alpha' == flag ) {\r\n        \t\treturn this.toCSS( 'rgba', '1' ).replace( /\\s+/g, '' );\r\n        \t}\r\n        \r\n        \t// If we have a proper opacity value, output RGBa.\r\n        \tif ( 1 > this._alpha ) {\r\n        \t\treturn this.toCSS( 'rgba', this._alpha ).replace( /\\s+/g, '' );\r\n        \t}\r\n        \r\n        \t// Proceed with stock color.js hex output.\r\n        \tvar hex = parseInt( this._color, 10 ).toString( 16 );\r\n        \tif ( this.error ) { return ''; }\r\n        \tif ( hex.length < 6 ) {\r\n        \t\tfor ( var i = 6 - hex.length - 1; i >= 0; i-- ) {\r\n        \t\t\thex = '0' + hex;\r\n        \t\t}\r\n        \t}\r\n        \r\n        \treturn '#' + hex;\r\n        };\r\n        \r\n        /**\r\n         * Given an RGBa, RGB, or hex color value, return the alpha channel value.\r\n         */\r\n        function acp_get_alpha_value_from_color( value ) {\r\n        \tvar alphaVal;\r\n        \r\n        \t// Remove all spaces from the passed in value to help our RGBa regex.\r\n        \tvalue = value.replace( / /g, '' );\r\n        \r\n        \tif ( value.match( /rgba\\(\\d+\\,\\d+\\,\\d+\\,([^\\)]+)\\)/ ) ) {\r\n        \t\talphaVal = parseFloat( value.match( /rgba\\(\\d+\\,\\d+\\,\\d+\\,([^\\)]+)\\)/ )[1] ).toFixed(2) * 100;\r\n        \t\talphaVal = parseInt( alphaVal );\r\n        \t} else {\r\n        \t\talphaVal = 100;\r\n        \t}\r\n        \r\n        \treturn alphaVal;\r\n        }\r\n        \r\n        /**\r\n         * Force update the alpha value of the color picker object and maybe the alpha slider.\r\n         */\r\n        function acp_update_alpha_value_on_color_control( alpha, $control, $alphaSlider, update_slider ) {\r\n        \tvar iris, colorPicker, color;\r\n        \r\n        \tiris = $control.data( 'a8cIris' );\r\n        \tcolorPicker = $control.data( 'wpWpColorPicker' );\r\n        \r\n        \t// Set the alpha value on the Iris object.\r\n        \tiris._color._alpha = alpha;\r\n        \r\n        \t// Store the new color value.\r\n        \tcolor = iris._color.toString();\r\n        \r\n        \t// Set the value of the input.\r\n        \t$control.val( color );\r\n        \r\n        \t// Update the background color of the color picker.\r\n        \tcolorPicker.toggler.css({\r\n        \t\t'background-color': color\r\n        \t});\r\n        \r\n        \t// Maybe update the alpha slider itself.\r\n        \tif ( update_slider ) {\r\n        \t\tacp_update_alpha_value_on_alpha_slider( alpha, $alphaSlider );\r\n        \t}\r\n        \r\n        \t// Update the color value of the color picker object.\r\n        \t$control.wpColorPicker( 'color', color );\r\n        }\r\n        \r\n        /**\r\n         * Update the slider handle position and label.\r\n         */\r\n        function acp_update_alpha_value_on_alpha_slider( alpha, $alphaSlider ) {\r\n        \t$alphaSlider.slider( 'value', alpha );\r\n        \t$alphaSlider.find( '.ui-slider-handle' ).text( alpha.toString() );\r\n        }\r\n        \r\n        /**\r\n         * Initialization trigger.\r\n         */\r\n        jQuery( document ).ready( function( $ ) {\r\n        \r\n        \t// Loop over each control and transform it into our color picker.\r\n        \t$( '.alpha-color-control' ).each( function() {\r\n        \r\n        \t\t// Scope the vars.\r\n        \t\tvar $control, startingColor, paletteInput, showOpacity, defaultColor, palette,\r\n        \t\t\tcolorPickerOptions, $container, $alphaSlider, alphaVal, sliderOptions;\r\n        \r\n        \t\t// Store the control instance.\r\n        \t\t$control = $( this );\r\n        \r\n        \t\t// Get a clean starting value for the option.\r\n        \t\tstartingColor = $control.val().replace( /\\s+/g, '' );\r\n        \r\n        \t\t// Get some data off the control.\r\n        \t\tpaletteInput = $control.attr( 'data-palette' );\r\n        \t\tshowOpacity  = $control.attr( 'data-show-opacity' );\r\n        \t\tdefaultColor = $control.attr( 'data-default-color' );\r\n        \r\n        \t\t// Process the palette.\r\n        \t\tif ( paletteInput.indexOf( '|' ) !== -1 ) {\r\n        \t\t\tpalette = paletteInput.split( '|' );\r\n        \t\t} else if ( 'false' == paletteInput ) {\r\n        \t\t\tpalette = false;\r\n        \t\t} else {\r\n        \t\t\tpalette = true;\r\n        \t\t}\r\n        \r\n        \t\t// Set up the options that we'll pass to wpColorPicker().\r\n        \t\tcolorPickerOptions = {\r\n        \t\t\tchange: function( event, ui ) {\r\n        \t\t\t\tvar key, value, alpha, $transparency;\r\n        \r\n        \t\t\t\tkey = $control.attr( 'data-customize-setting-link' );\r\n        \t\t\t\tvalue = $control.wpColorPicker( 'color' );\r\n        \r\n        \t\t\t\t// Set the opacity value on the slider handle when the default color button is clicked.\r\n        \t\t\t\tif ( defaultColor == value ) {\r\n        \t\t\t\t\talpha = acp_get_alpha_value_from_color( value );\r\n        \t\t\t\t\t$alphaSlider.find( '.ui-slider-handle' ).text( alpha );\r\n        \t\t\t\t}\r\n        \r\n        \t\t\t\t// Send ajax request to wp.customize to trigger the Save action.\r\n        \t\t\t\twp.customize( key, function( obj ) {\r\n        \t\t\t\t\tobj.set( value );\r\n        \t\t\t\t});\r\n        \r\n        \t\t\t\t$transparency = $container.find( '.transparency' );\r\n        \r\n        \t\t\t\t// Always show the background color of the opacity slider at 100% opacity.\r\n        \t\t\t\t$transparency.css( 'background-color', ui.color.toString( 'no-alpha' ) );\r\n        \t\t\t},\r\n        \t\t\tpalettes: palette // Use the passed in palette.\r\n        \t\t};\r\n        \r\n        \t\t// Create the colorpicker.\r\n        \t\t$control.wpColorPicker( colorPickerOptions );\r\n        \r\n        \t\t$container = $control.parents( '.wp-picker-container:first' );\r\n        \r\n        \t\t// Insert our opacity slider.\r\n        \t\t$( '<div class=\"alpha-color-picker-container\">' +\r\n        \t\t\t'<div class=\"min-click-zone click-zone\"></div>' +\r\n        \t\t\t'<div class=\"max-click-zone click-zone\"></div>' +\r\n        \t\t\t'<div class=\"alpha-slider\"></div>' +\r\n        \t\t\t'<div class=\"transparency\"></div>' +\r\n        \t\t\t'</div>' ).appendTo( $container.find( '.wp-picker-holder' ) );\r\n        \r\n        \t\t$alphaSlider = $container.find( '.alpha-slider' );\r\n        \r\n        \t\t// If starting value is in format RGBa, grab the alpha channel.\r\n        \t\talphaVal = acp_get_alpha_value_from_color( startingColor );\r\n        \r\n        \t\t// Set up jQuery UI slider() options.\r\n        \t\tsliderOptions = {\r\n        \t\t\tcreate: function( event, ui ) {\r\n        \t\t\t\tvar value = $( this ).slider( 'value' );\r\n        \r\n        \t\t\t\t// Set up initial values.\r\n        \t\t\t\t$( this ).find( '.ui-slider-handle' ).text( value );\r\n        \t\t\t\t$( this ).siblings( '.transparency ').css( 'background-color', startingColor );\r\n        \t\t\t},\r\n        \t\t\tvalue: alphaVal,\r\n        \t\t\trange: 'max',\r\n        \t\t\tstep: 1,\r\n        \t\t\tmin: 0,\r\n        \t\t\tmax: 100,\r\n        \t\t\tanimate: 300\r\n        \t\t};\r\n        \r\n        \t\t// Initialize jQuery UI slider with our options.\r\n        \t\t$alphaSlider.slider( sliderOptions );\r\n        \r\n        \t\t// Maybe show the opacity on the handle.\r\n        \t\tif ( 'true' == showOpacity ) {\r\n        \t\t\t$alphaSlider.find( '.ui-slider-handle' ).addClass( 'show-opacity' );\r\n        \t\t}\r\n        \r\n        \t\t// Bind event handlers for the click zones.\r\n        \t\t$container.find( '.min-click-zone' ).on( 'click', function() {\r\n        \t\t\tacp_update_alpha_value_on_color_control( 0, $control, $alphaSlider, true );\r\n        \t\t});\r\n        \t\t$container.find( '.max-click-zone' ).on( 'click', function() {\r\n        \t\t\tacp_update_alpha_value_on_color_control( 100, $control, $alphaSlider, true );\r\n        \t\t});\r\n        \r\n        \t\t// Bind event handler for clicking on a palette color.\r\n        \t\t$container.find( '.iris-palette' ).on( 'click', function() {\r\n        \t\t\tvar color, alpha;\r\n        \r\n        \t\t\tcolor = $( this ).css( 'background-color' );\r\n        \t\t\talpha = acp_get_alpha_value_from_color( color );\r\n        \r\n        \t\t\tacp_update_alpha_value_on_alpha_slider( alpha, $alphaSlider );\r\n        \r\n        \t\t\t// Sometimes Iris doesn't set a perfect background-color on the palette,\r\n        \t\t\t// for example rgba(20, 80, 100, 0.3) becomes rgba(20, 80, 100, 0.298039).\r\n        \t\t\t// To compensante for this we round the opacity value on RGBa colors here\r\n        \t\t\t// and save it a second time to the color picker object.\r\n        \t\t\tif ( alpha != 100 ) {\r\n        \t\t\t\tcolor = color.replace( /[^,]+(?=\\))/, ( alpha / 100 ).toFixed( 2 ) );\r\n        \t\t\t}\r\n        \r\n        \t\t\t$control.wpColorPicker( 'color', color );\r\n        \t\t});\r\n        \r\n        \t\t// Bind event handler for clicking on the 'Clear' button.\r\n        \t\t$container.find( '.button.wp-picker-clear' ).on( 'click', function() {\r\n        \t\t\tvar key = $control.attr( 'data-customize-setting-link' );\r\n        \r\n        \t\t\t// The #fff color is delibrate here. This sets the color picker to white instead of the\r\n        \t\t\t// defult black, which puts the color picker in a better place to visually represent empty.\r\n        \t\t\t$control.wpColorPicker( 'color', '#ffffff' );\r\n        \r\n        \t\t\t// Set the actual option value to empty string.\r\n        \t\t\twp.customize( key, function( obj ) {\r\n        \t\t\t\tobj.set( '' );\r\n        \t\t\t});\r\n        \r\n        \t\t\tacp_update_alpha_value_on_alpha_slider( 100, $alphaSlider );\r\n        \t\t});\r\n        \r\n        \t\t// Bind event handler for clicking on the 'Default' button.\r\n        \t\t$container.find( '.button.wp-picker-default' ).on( 'click', function() {\r\n        \t\t\tvar alpha = acp_get_alpha_value_from_color( defaultColor );\r\n        \r\n        \t\t\tacp_update_alpha_value_on_alpha_slider( alpha, $alphaSlider );\r\n        \t\t});\r\n        \r\n        \t\t// Bind event handler for typing or pasting into the input.\r\n        \t\t$control.on( 'input', function() {\r\n        \t\t\tvar value = $( this ).val();\r\n        \t\t\tvar alpha = acp_get_alpha_value_from_color( value );\r\n        \r\n        \t\t\tacp_update_alpha_value_on_alpha_slider( alpha, $alphaSlider );\r\n        \t\t});\r\n        \r\n        \t\t// Update all the things when the slider is interacted with.\r\n        \t\t$alphaSlider.slider().on( 'slide', function( event, ui ) {\r\n        \t\t\tvar alpha = parseFloat( ui.value ) / 100.0;\r\n        \r\n        \t\t\tacp_update_alpha_value_on_color_control( alpha, $control, $alphaSlider, false );\r\n        \r\n        \t\t\t// Change value shown on slider handle.\r\n        \t\t\t$( this ).find( '.ui-slider-handle' ).text( ui.value );\r\n        \t\t});\r\n        \r\n        \t});\r\n        });\r\n        /**\r\n         * Display Video URL metabox depending on selected post format.\r\n         */\r\n        \r\n        function postFormatControl() {\r\n            if ( \"checked\" === $( \"#post-format-video\" ).attr( \"checked\" ) ) {\r\n                $( \"#bdbg_video_url\" ).removeClass( \"hidden\" );\r\n            } else {\r\n                $( \"#bdbg_video_url\" ).addClass( \"hidden\" );\r\n            }\r\n         }\r\n        \r\n        postFormatControl();\r\n        \r\n        if ( $( \"#post-formats-select\" ).length ) {\r\n            $( \"#post-formats-select\" ).find( \".post-format\" ).on( \"change\", function() {\r\n                postFormatControl();\r\n            } );\r\n        }\r\n\r\n    } );\r\n\r\n} )( jQuery );"],"file":"admin.js","sourceRoot":"/source/"}